% BRAIN
  brainType = CGP                            #(string) brain to be used, [Human, Markov, CGP]

% BRAIN_HUMAN
  actionMapFileName = actionMap.txt          #(string) if useActionMap = true, use this file
  useActionMap = 0                           #(bool) if true, an action map will be used to translate user input

% BRAIN_MARKOV
  genomeNameSpace = root::                   #(string) namespace used to set parameters for genome used to encode this brain
  hiddenNodes = 8                            #(int) number of hidden nodes

% BRAIN_MARKOV_ADVANCED
  bitsPerBrainAddress = 8                    #(int) how many bits are evaluated to determine the brain addresses
  bitsPerCodon = 8                           #(int) how many bits are evaluated to determine the codon addresses
  randomizeUnconnectedOutputs = 0            #(bool) output nodes with no connections will be set randomly (default : false, behavior set to 0)
  randomizeUnconnectedOutputsMax = 1.0       #(double) random values resulting from randomizeUnconnectedOutput will be in the range of randomizeUnconnectedOutputsMin
                                             #  to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsMin = 0.0       #(double) random values resulting from randomizeUnconnectedOutput will be in the range of randomizeUnconnectedOutputsMin
                                             #  to randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsType = 0        #(int) determines type of values resulting from randomizeUnconnectedOutput 0 = int, 1 = double
  recordIOMap = 0                            #(bool) if true, all inoput output and hidden nodes will be recorderd on every brain update
  recordIOMap_fileName = markov_IO_map.csv   #(string) Name of file where IO mappings are saved

% BRAIN_MARKOV_GATES_DECOMPOSABLE
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposible gates
  initialCount = 3                           #(int) seed genome with this many start codons
  rowFirst = 1                               #(bool) set to true to make second-order decomposable gates operate in row-first expansion
  use2Level = 0                              #(bool) set to true to allow "super decomposable" gates

% BRAIN_MARKOV_GATES_DECOMPOSABLE_DIRECT
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposible gates (direct factors version)
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DECOMPOSABLE_FEEDBACK
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable decomposable feedback gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_DETERMINISTIC
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  #(bool) set to true to enable deterministic gates?
  initialCount = 6                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_EPSILON
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable epsilon gates
  epsilonSource = 0.05                       #(double) if value is in ance tha[0,1], cht output will be randomized. if < 1 or < 0, epsilon value is determined by
                                             #  the genome. If positive, then the genome handler will advance int(value) number of sites - 1 from the current location,
                                             #  before reading. If the value is negative, then int(abs(value)) indicates the absolute index of the site to be used
                                             #  i.e.(site at abs(value) in genome)
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_FEEDBACK
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable feedback gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_GENETICPROGRAMING
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable GP (what?) gates
  constValueMax = 1.0                        #(double) for the const values, max value the genome can generate
  constValueMin = -1.0                       #(double) for the const values, min value the genome can generate
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_NEURON
  allow = 0                                  #(bool) set to true to enable Neuron gates
  allowRepression = 1                        #(bool) if false, neuronGates only fire if charge exceeds threshold; if true, neuronGates can also exist which always
                                             #  fire, except when charge exceeds threshold
  decayRateMax = 1.0                         #(double) max % current charge will decay each time gate update is called (towards 0) per update
  decayRateMin = 0.0                         #(double) min % current charge will decay each time gate update is called (towards 0) per update
  deliveryChargeFromNode = -1                #(int) if 0, genome will determine deliveryCharge value within deliveryCharge range
                                             #  if 1, gate will have additional input, determined by genome, which will be clamped to deliveryCharge range and used
                                             #  as deliveryCharge value, if -1, genome will decide between options 0 and 1
  deliveryChargeMax = 2.0                    #(double) output charge
  deliveryChargeMin = -2.0                   #(double) output charge
  deliveryError = 0.0                        #(double) error in deliveryCharge... charge -= random[0,deliveryError)
  dischargeBehavior = -1                     #(int) what happens when gate fires (-1: let genome decide, 0: clear charge, 1: 'reduce' by delivery charge, 2: 1/2
                                             #  charge)
  initialCount = 20                          #(int) seed genome with this many start codons (neurons tend to work better in larger numbers)
  numInputsMax = 4                           #(int) max number of inputs to neuronGate
  numInputsMin = 1                           #(int) min number of inputs to neuronGate
  record_behavior = 0                        #(bool) if true, record neuron behavior (NOTE: this can generate a lot of data!)
  record_behavior_fileName = neuron_behavior.csv #(string) Name of file where neron behaviors are saved
  thresholdFromNode = -1                     #(int) if 0, genome will determine threshold value within threshold range
                                             #  if 1, gate will have additional input, determined by genome, which will be clamped to threshold range and used as
                                             #  threshold value, if -1, genome will decide between options 0 and 1
  thresholdMax = 2.0                         #(double) highest possible value for threshold
  thresholdMin = -2.0                        #(double) lowest possible value for threshold

% BRAIN_MARKOV_GATES_PROBABILISTIC
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable probabilistic gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_TRIT
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable tritDeterministic gates
  initialCount = 3                           #(int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_VOID
  IO_Ranges = 1-4,1-4                        #(string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  #(bool) set to true to enable void gates
  epsilonSource = 0.05                       #(double) if value is in [0,1], chance that output will be randomized. if < 1 or < 0, epsilon value is determined by
                                             #  the genome. If positive, then the genome handler will advance int(value) number of sites - 1 from the current location,
                                             #  before reading. If the value is negative, then int(abs(value)) indicates the absolute index of the site to be used
                                             #  i.e.(site at abs(value) in genome
  initialCount = 3                           #(int) seed genome with this many start codons

% GENOME
  alphabetSize = 256.0                       #(double) alphabet size for genome
  genomeType = Circular                      #(string) genome to be used, [Circular]
  sitesType = char                           #(string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  #(int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  #(int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 #(double) per site insertion rate
  mutationCrossCount = 3                     #(int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                #(int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                #(int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               #(double) per site deletion rate
  mutationIndelCopyFirst = 1                 #(bool) whether copy or deletion happens first (0 = delete first, 1 = copy first)
  mutationIndelInsertMethod = 0              #(int) where is copied material inserted?
                                             #  0 = place random, 1 = replace deleted sites, 2 = insert just before copied material
  mutationIndelMaxSize = 512                 #(int) maximum size of insertion-deletion mutation
  mutationIndelMinSize = 128                 #(int) minimum size of insertion-deletion mutation
  mutationIndelRate = 0.0                    #(double) per site insertion+deletion (indel) rate. This mutation copies a segment of the genome and deletes a segment
                                             #  of the same size so genome size remains fixed).
  mutationPointOffsetRange = 1.0             #(double) range of PointOffset mutation
  mutationPointOffsetRate = 0.0              #(double) per site point offset mutation rate (site changes in range (+/-)mutationPointOffsetRange)
  mutationPointOffsetUniform = 1             #(bool) if true, offset will be from a uniform distribution, if false, from a normal distribution (where mean is 0
                                             #  and std_dev is mutationPointOffsetRange)
  mutationPointRate = 0.005                  #(double) per site point mutation rate
  sizeInitial = 5000                         #(int) starting size for genome
  sizeMax = 20000                            #(int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             #(int) if genome is smaller then this, mutations will only increase chromosome size

